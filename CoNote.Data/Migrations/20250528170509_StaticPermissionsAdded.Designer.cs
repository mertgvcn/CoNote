// <auto-generated />
using System;
using CoNote.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoNote.Data.Migrations
{
    [DbContext(typeof(CoNoteContext))]
    [Migration("20250528170509_StaticPermissionsAdded")]
    partial class StaticPermissionsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoNote.Core.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mutation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldObjectValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorksheetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorksheetId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Component", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<double>("Rotation")
                        .HasColumnType("double precision");

                    b.Property<string>("Style")
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<long>("WorksheetId")
                        .HasColumnType("bigint");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.Property<int>("ZIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorksheetId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Invitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9174),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9175),
                            EditedBy = "System",
                            ObjectType = 0
                        },
                        new
                        {
                            Id = 2L,
                            Action = 0,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9178),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9179),
                            EditedBy = "System",
                            ObjectType = 1
                        },
                        new
                        {
                            Id = 3L,
                            Action = 1,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9181),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9181),
                            EditedBy = "System",
                            ObjectType = 1
                        },
                        new
                        {
                            Id = 4L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9183),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9184),
                            EditedBy = "System",
                            ObjectType = 1
                        },
                        new
                        {
                            Id = 5L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9186),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9186),
                            EditedBy = "System",
                            ObjectType = 1
                        },
                        new
                        {
                            Id = 6L,
                            Action = 0,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9190),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9190),
                            EditedBy = "System",
                            ObjectType = 2
                        },
                        new
                        {
                            Id = 7L,
                            Action = 1,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9192),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9192),
                            EditedBy = "System",
                            ObjectType = 2
                        },
                        new
                        {
                            Id = 8L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9194),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9195),
                            EditedBy = "System",
                            ObjectType = 2
                        },
                        new
                        {
                            Id = 9L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9197),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9197),
                            EditedBy = "System",
                            ObjectType = 2
                        },
                        new
                        {
                            Id = 10L,
                            Action = 0,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9200),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9200),
                            EditedBy = "System",
                            ObjectType = 3
                        },
                        new
                        {
                            Id = 11L,
                            Action = 1,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9202),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9202),
                            EditedBy = "System",
                            ObjectType = 3
                        },
                        new
                        {
                            Id = 12L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9204),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9205),
                            EditedBy = "System",
                            ObjectType = 3
                        },
                        new
                        {
                            Id = 13L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9206),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9207),
                            EditedBy = "System",
                            ObjectType = 3
                        },
                        new
                        {
                            Id = 14L,
                            Action = 0,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9209),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9209),
                            EditedBy = "System",
                            ObjectType = 4
                        },
                        new
                        {
                            Id = 15L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9211),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9212),
                            EditedBy = "System",
                            ObjectType = 4
                        },
                        new
                        {
                            Id = 16L,
                            Action = 0,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9214),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9214),
                            EditedBy = "System",
                            ObjectType = 5
                        },
                        new
                        {
                            Id = 17L,
                            Action = 1,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9216),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9216),
                            EditedBy = "System",
                            ObjectType = 5
                        },
                        new
                        {
                            Id = 18L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9219),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9219),
                            EditedBy = "System",
                            ObjectType = 5
                        },
                        new
                        {
                            Id = 19L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9221),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9222),
                            EditedBy = "System",
                            ObjectType = 5
                        },
                        new
                        {
                            Id = 20L,
                            Action = 1,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9224),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9224),
                            EditedBy = "System",
                            ObjectType = 6
                        },
                        new
                        {
                            Id = 21L,
                            Action = 2,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9226),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9226),
                            EditedBy = "System",
                            ObjectType = 6
                        },
                        new
                        {
                            Id = 22L,
                            Action = 3,
                            CreatedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9228),
                            CreatedBy = "System",
                            EditedAt = new DateTime(2025, 5, 28, 20, 5, 8, 203, DateTimeKind.Local).AddTicks(9229),
                            EditedBy = "System",
                            ObjectType = 6
                        });
                });

            modelBuilder.Entity("CoNote.Core.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CoNote.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Worksheet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Worksheets");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Workspace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("CoNote.Core.Entities.WorkspaceMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceMembers");
                });

            modelBuilder.Entity("CoNote.Data.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EditedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<long>("PermissionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<long>("FollowersId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowingsId")
                        .HasColumnType("bigint");

                    b.HasKey("FollowersId", "FollowingsId");

                    b.HasIndex("FollowingsId");

                    b.ToTable("UserFollowings", (string)null);
                });

            modelBuilder.Entity("UserUser1", b =>
                {
                    b.Property<long>("BlockedByUsersId")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("BlockedByUsersId", "BlockedUsersId");

                    b.HasIndex("BlockedUsersId");

                    b.ToTable("UserBlocks", (string)null);
                });

            modelBuilder.Entity("CoNote.Core.Entities.Comment", b =>
                {
                    b.HasOne("CoNote.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.Worksheet", "Worksheet")
                        .WithMany("Comments")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Worksheet");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Component", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Worksheet", "Worksheet")
                        .WithMany("Components")
                        .HasForeignKey("WorksheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worksheet");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Invitation", b =>
                {
                    b.HasOne("CoNote.Core.Entities.User", "Receiver")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoNote.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.User", "Sender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.Workspace", "Workspace")
                        .WithMany("Invitations")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Role");

                    b.Navigation("Sender");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Role", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Section", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Section", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoNote.Core.Entities.Workspace", "Workspace")
                        .WithMany("Sections")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Worksheet", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Section", "Section")
                        .WithMany("Worksheets")
                        .HasForeignKey("SectionId");

                    b.HasOne("CoNote.Core.Entities.Workspace", "Workspace")
                        .WithMany("Worksheets")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoNote.Core.Entities.WorkspaceMember", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.User", "User")
                        .WithMany("WorkspaceMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.Workspace", "Workspace")
                        .WithMany("Members")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("CoNote.Data.Entities.Notification", b =>
                {
                    b.HasOne("CoNote.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("CoNote.Core.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("CoNote.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser1", b =>
                {
                    b.HasOne("CoNote.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("BlockedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoNote.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("BlockedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoNote.Core.Entities.Section", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Worksheets");
                });

            modelBuilder.Entity("CoNote.Core.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("SentInvitations");

                    b.Navigation("WorkspaceMemberships");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Worksheet", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Components");
                });

            modelBuilder.Entity("CoNote.Core.Entities.Workspace", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Members");

                    b.Navigation("Sections");

                    b.Navigation("Worksheets");
                });
#pragma warning restore 612, 618
        }
    }
}
